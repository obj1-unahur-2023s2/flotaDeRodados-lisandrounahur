import rodados.*
import dependencia.*

describe "Test de Dependencia" {
	const deportes = new Dependencia(cantidadEmpleados=45)
	const cultura = new Dependencia(cantidadEmpleados=31)
	const cachito = new Corsa(color="rojo")
	method initialize(){
		deportes.agregarAFlota(cachito)
		cultura.agregarAFlota(cachito)
		deportes.agregarAFlota(new Corsa(color="azul"))
		deportes.agregarAFlota(new Corsa(color="verde"))
		deportes.agregarAFlota(new Kwid(tanqueAdicional=true))
		deportes.agregarAFlota(new AutoEspecial(capacidad=5, velocidad=160, peso=1200, color="beige"))
		cultura.agregarAFlota(new Kwid(tanqueAdicional=false))
		cultura.agregarAFlota(new Kwid(tanqueAdicional=true))
		cultura.agregarAFlota(new Kwid())
		traficProfe.configurar(interiorPopular,motorBataton)
		cultura.agregarAFlota(traficProfe)
	}
	
	test "peso total de la flota de deporte" {
		assert.equals(1300 * 3 + 1350 + 1200, deportes.pesoTotalFlota())
	}
	
	test "peso total de la flota de cultura" {
		assert.equals(1300  + 1350 * 2 + 1200 + 5500, cultura.pesoTotalFlota())
	}
	
	test "estan bien equipadas deporte" {
		assert.that(deportes.estaBienEquipada())
	}
	
	test "esta bien equipada cultura"{
		assert.notThat(cultura.estaBienEquipada())
	}
	
	test "capacidad total de deporte en color azul" {
		assert.equals(7, deportes.capacidadTotalEnColor("azul"))
	}
	
	test "capacidad total de cultura en color azul" {
		assert.equals(4, cultura.capacidadTotalEnColor("azul"))
	}
	
	test "capacidad faltante de deportes"{
		assert.equals(25,deportes.capacidadFaltante())
	}
	test "capacidad faltante de cultura"{
		assert.equals(4,cultura.capacidadFaltante())
	}
}